# -*- coding: utf-8 -*-
"""barra

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qlTSaNj6KvE1V1Q3-kymPnTI3uceanya
"""

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as manimation
#%%
g=9.81
L=2
a=0.5
m=1
I=1/12*m*L**2
mu=I/(m*a**2)
w02=g/a

def F(pos,vel):
    afi=(-w02*pos*np.cos(pos)-pos*vel**2)/(mu+pos**2)
    return afi
def Fsmall(pos,vel):
  afi=-w02*pos/mu
  return afi
#cis
dt=0.01
tin=0
tmax=10
n=int(tmax/dt)

p0=-np.pi/6
v0=0

t=np.arange(tin,tmax,dt)
vel=[v0]
pos=[p0]


for j in range(1,n):
    veli=vel[-1]+dt*F(pos[-1]+dt/2 *vel[-1],vel[-1]+dt/2 *F(pos[-1],vel[-1]))
    posi=pos[-1]+dt*(vel[-1]+dt/2 *F(pos[-1],vel[-1]))
    vel.append(veli)
    pos.append(posi)

#%%
print(len(pos))
print(len(t))

#%%
x=[]
y=[]
xleft=[]
yleft=[]
xright=[]
yright=[]
for j in pos:
  xcm=a*(np.sin(j)-j*np.cos(j))
  ycm=a*(np.cos(j)+j*np.sin(j))
  xl=xcm-L/2*np.cos(j)
  yl=ycm+L/2*np.sin(j)
  xr=xcm+L/2*np.cos(j)
  yr=ycm-L/2*np.sin(j)
  x.append(xcm)
  y.append(ycm)
  xleft.append(xl)
  yleft.append(yl)
  xright.append(xr)
  yright.append(yr)

def circle(radius,x_center,y_center):
  angle=np.linspace(0,2*np.pi,500)
  x=[]
  y=[]
  for j in angle:
    x.append(radius*np.cos(j))
    y.append(radius*np.sin(j))  
  return x,y

x0,y0=circle(a,0,a/2)

plt.figure(figsize=(6,6))
plt.plot(x,y,label=r'$\bar{r}_{CM}$')
plt.plot(xright,yright,label=r'$\bar{r}_{der}$')
plt.plot(xleft,yleft,label=r'$\bar{r}_{izq}$')
plt.plot(x0,y0,color='k')
plt.xlabel('x [m]')
plt.ylabel('y [m]')
plt.xlim([-a-0.7,a+0.7])
plt.ylim([-a-.7,a+.7])
plt.grid()
plt.legend()
plt.show()

#%%
FFMpegWriter = manimation.writers['ffmpeg']
metadata = dict(title='Movie Test', artist='Matplotlib',
                comment='a red circle following a blue sine wave')
writer = FFMpegWriter(fps=100, metadata=metadata)

fig=plt.figure(figsize=(6,6))

# Update the frames for the movie
with writer.saving(fig, "barra_que_oscila.mp4",100):
    for i in range(n):
        plt.xlabel('x [m]')
        plt.ylabel('y [m]')
        plt.xlim([-a-0.7,a+0.7])
        plt.ylim([-a-.7,a+.7])
        plt.grid()
        plt.plot(x0,y0,color='k')

        xcm=x[i];ycm=y[i]
        xl= xleft[i];yl=yleft[i]
        xr= xright[i];yr=yright[i]
        
        plt.scatter(xcm,ycm,c='navy',s=30,zorder=1,label=r'$\bar{r}_{CM}$')
        plt.plot([xcm,xl],[ycm,yl],color='navy',linewidth=3,zorder=0)
        plt.plot([xcm,xr],[ycm,yr],color='navy',linewidth=3,zorder=0)
        plt.legend()
        writer.grab_frame()
        plt.cla()